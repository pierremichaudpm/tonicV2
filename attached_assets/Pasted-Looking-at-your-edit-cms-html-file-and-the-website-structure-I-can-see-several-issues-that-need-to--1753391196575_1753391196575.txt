Looking at your edit-cms.html file and the website structure, I can see several issues that need to be addressed to make your CMS work properly. Let me break down the problems and provide solutions:

## Current Issues:

1. **Missing Backend API**: Your CMS is making calls to `/api/cms/` endpoints that don't exist
2. **No Authentication System**: The CMS expects a login but there's no auth implementation
3. **Disconnect Between CMS and Website**: Your job/news pages use static data files, but the CMS tries to save to an API
4. **Strapi vs Custom API Confusion**: Your pages reference Strapi but your CMS uses a different API structure

## Solutions:

### Option 1: Simple File-Based CMS (Easiest for Replit)

Create a simple backend that stores data in JSON files. Here's what you need:## Setup Instructions:

### 1. **Create the Backend Structure**

In your Replit project, create this folder structure:
```
your-replit-project/
├── server.js (the backend code I provided)
├── package.json (the package.json I provided)
├── public/ (move all your HTML files here)
│   ├── index.html
│   ├── emplois.html
│   ├── emplois-en.html
│   ├── communiques.html
│   ├── communiques-en.html
│   ├── edit-cms.html
│   ├── admin/
│   │   └── index.html (the login page I provided)
│   ├── css/
│   ├── js/
│   │   └── strapi-api.js (replace with updated version)
│   └── images/
└── data/ (will be created automatically)
    ├── jobs.json
    └── news.json
```

### 2. **Update Your Replit Configuration**

In your `.replit` file, change the run command to:
```bash
npm install && npm start
```

### 3. **Set Your Admin Credentials**

In `server.js`, change these lines:
```javascript
const ADMIN_TOKEN = 'your-secret-admin-token-here'; // Change this
// And in the login route:
if (password === 'your-admin-password') { // Change this password
```

### 4. **Test the Setup**

1. Run your Replit project
2. Go to `/admin` to login
3. Use your admin password to access `/edit-cms.html`
4. Your job and news pages should now load data from the CMS

### Option 2: Keep Using Strapi (More Complex)

If you prefer to stick with Strapi, you'll need to:

1. **Deploy Strapi separately** (Heroku, Railway, or Strapi Cloud)
2. **Update your edit-cms.html** to use Strapi's API format
3. **Configure CORS** properly between your Replit site and Strapi

Would you like me to:
1. **Go with the simple file-based solution** (recommended for Replit)
2. **Help you set up Strapi properly** 
3. **Create a hybrid solution** that works with your current static files

The file-based solution is much easier to implement and maintain on Replit, and it will work perfectly for your needs. Which approach would you prefer?