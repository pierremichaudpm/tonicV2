Looking at your CMS code, I can see that the frontend JavaScript is actually handling the content correctly and trying to avoid truncation. The issue is **not in the frontend code** but rather in the **backend `/api/translate` endpoint**.

Here's my analysis:

## 1. Frontend is Sending Complete Content

Your `translateText` function is sending the full content to the backend:

```javascript
const response = await fetch('/api/translate', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'x-admin-password': 'admin123'
    },
    body: JSON.stringify({
        text: text,  // Full text is being sent
        fromLang: fromLang,
        toLang: toLang
    })
});
```

## 2. Frontend Logging Confirms Full Content

Your debugging logs show:
- "Translating complete content of length: 10,000+" (full content going in)
- "INVESTIGATION - AI returned content length: 3000-4000" (truncated content coming back)
- "9+ second translation calls" (suggests backend is processing full content)

## 3. The Truncation is Happening in the Backend

The issue is in your **backend `/api/translate` endpoint**. Common causes:

### A. **Response Size Limit**
Your backend might have a response size limit. Check for:
- Express.js body parser limits
- Nginx/Apache response size limits
- Cloud provider (Vercel, Netlify, etc.) response limits

### B. **Claude API Response Handling**
Your backend might be truncating Claude's response:
- String manipulation in the backend
- Buffer size limits when reading Claude's response
- JSON parsing limits

### C. **Database/Storage Limits**
If the backend stores translations before returning them:
- Database field size limits (VARCHAR vs TEXT)
- File system write limits

## 4. Quick Fix Suggestion

To confirm this is a backend issue, add this test in your `translateText` function:

```javascript
// Add this after receiving the response
if (result.translatedText && text.length > 5000 && result.translatedText.length < text.length * 0.5) {
    console.error('TRUNCATION DETECTED: Original length:', text.length, 'Translated length:', result.translatedText.length);
    console.error('Translation appears to be truncated to approximately:', Math.round(result.translatedText.length / 1000) * 1000, 'characters');
}
```

## 5. Backend Fix Required

You need to check your backend `/api/translate` endpoint for:

1. **Request body size limits**:
   ```javascript
   app.use(express.json({ limit: '50mb' }));
   ```

2. **Claude API call implementation**:
   - Ensure you're not truncating the input text
   - Ensure you're not truncating Claude's response
   - Check max_tokens parameter in Claude API call

3. **Response handling**:
   - Make sure you're not using substring() or slice() on the response
   - Check for any string length limits

The frontend code is working correctly - the truncation is definitely happening on the backend side of your `/api/translate` endpoint.