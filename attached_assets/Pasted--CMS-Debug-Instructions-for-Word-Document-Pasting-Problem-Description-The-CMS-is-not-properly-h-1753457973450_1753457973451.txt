# CMS Debug Instructions for Word Document Pasting

## Problem Description
The CMS is not properly handling copy-paste from Word documents. When users paste communiqués, news, jobs, or emplois from Word, the formatting is not preserved correctly. We need:

1. **Proper paragraph breaks** - Word content should be split into proper HTML paragraphs
2. **Clickable hyperlinks** - Links from Word should remain clickable and underlined
3. **Email detection** - Email addresses should be automatically converted to mailto links with underlines
4. **URL detection** - Web URLs should be automatically converted to clickable links with underlines
5. **Bold text preservation** - Bold formatting should be maintained

## Current Issues in the Code

### 1. Paste Handling Issues
The current `handlePaste()` function only shows a preview but doesn't properly process Word formatting:

```javascript
// CURRENT (PROBLEMATIC)
function handlePaste(event, fieldId) {
    setTimeout(() => {
        const textarea = document.getElementById(fieldId);
        const content = textarea.value;
        // Only shows preview, doesn't process Word formatting
    }, 100);
}
```

### 2. Text Processing Issues
The `processTextToParagraphs()` function doesn't handle Word's hidden formatting properly:

```javascript
// CURRENT (NEEDS IMPROVEMENT)
function processTextToParagraphs(text) {
    // Doesn't strip Word's hidden characters
    // Paragraph detection is too simple
    // Doesn't preserve original links from Word
}
```

## Required Fixes

### Fix 1: Improve Paste Handling
Replace the `handlePaste()` function with this enhanced version:

```javascript
function handlePaste(event, fieldId) {
    event.preventDefault();
    
    // Get clipboard data
    const clipboardData = (event.clipboardData || window.clipboardData);
    let pastedData = '';
    
    // Try to get HTML first (preserves Word links), then fall back to plain text
    if (clipboardData.types.includes('text/html')) {
        pastedData = clipboardData.getData('text/html');
        pastedData = cleanWordHTML(pastedData); // Clean Word's messy HTML
    } else {
        pastedData = clipboardData.getData('text/plain');
    }
    
    // Process the content
    const processedContent = processWordContent(pastedData);
    
    // Insert into textarea
    const textarea = document.getElementById(fieldId);
    textarea.value = processedContent;
    
    // Show preview
    showContentPreview(fieldId, processedContent);
}
```

### Fix 2: Add Word HTML Cleaning Function
Add this new function to clean Word's messy HTML:

```javascript
function cleanWordHTML(html) {
    // Remove Word's XML namespaces and proprietary tags
    html = html.replace(/<o:p\s*\/?>|<\/o:p>/gi, '');
    html = html.replace(/<w:.*?>.*?<\/w:.*?>/gi, '');
    html = html.replace(/<!--\[if gte mso.*?<!\[endif\]-->/gi, '');
    html = html.replace(/<!--.*?-->/gi, '');
    
    // Clean up Word's span styling but preserve links
    html = html.replace(/<span[^>]*?style="[^"]*"[^>]*?>(.*?)<\/span>/gi, '$1');
    html = html.replace(/<span[^>]*?>(.*?)<\/span>/gi, '$1');
    
    // Preserve links but clean their attributes
    html = html.replace(/<a\s+[^>]*href="([^"]*)"[^>]*>(.*?)<\/a>/gi, '<a href="$1">$2</a>');
    
    // Convert to plain text but preserve link information
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    // Extract links and their text
    const links = tempDiv.querySelectorAll('a');
    let plainText = tempDiv.textContent || tempDiv.innerText || '';
    
    // Mark where links should be restored
    links.forEach((link, index) => {
        const linkText = link.textContent;
        const linkUrl = link.href;
        plainText = plainText.replace(linkText, `__LINK_${index}__${linkText}__LINKURL_${linkUrl}__`);
    });
    
    return plainText;
}
```

### Fix 3: Enhanced Word Content Processing
Replace `processTextToParagraphs()` with this improved version:

```javascript
function processWordContent(text) {
    if (!text || text.trim().length === 0) return '';
    
    // First, restore links that were marked during Word HTML cleaning
    text = text.replace(/__LINK_(\d+)__(.*?)__LINKURL_(.*?)__/g, '<a href="$3" style="text-decoration: underline; color: #1d4ed8;">$2</a>');
    
    // Clean up Word's special characters
    text = text.replace(/[\u2018\u2019]/g, "'"); // Smart quotes
    text = text.replace(/[\u201C\u201D]/g, '"'); // Smart quotes
    text = text.replace(/\u2013/g, '-'); // En dash
    text = text.replace(/\u2014/g, '--'); // Em dash
    text = text.replace(/\u2026/g, '...'); // Ellipsis
    text = text.replace(/\u00A0/g, ' '); // Non-breaking space
    
    // Convert URLs and emails to links (for any new ones not from Word)
    text = convertUrlsToLinks(text);
    
    // Smart paragraph detection
    let paragraphs = [];
    
    // Split on clear paragraph indicators
    const sections = text.split(/\n\s*\n+/);
    
    sections.forEach(section => {
        // Further split on specific patterns that indicate new paragraphs
        const subParagraphs = section.split(/\n(?=[A-ZÀÉÈÊËÏÎÔÖÙÚÛÜŸÇ]|Montréal|COMMUNIQUÉ|CONTACT|Pour |Après |Les |En |De |Le |La |Ce |Cette |Dans |Selon |Nous |Il |Elle |Contact|Tel|Tél|Email|E-mail)/);
        
        subParagraphs.forEach(para => {
            const cleanPara = para.trim()
                .replace(/\n+/g, ' ')
                .replace(/\s+/g, ' ')
                .trim();
            
            if (cleanPara.length > 10) { // Only keep substantial paragraphs
                paragraphs.push(cleanPara);
            }
        });
    });
    
    // If no paragraphs detected, treat entire text as one paragraph
    if (paragraphs.length === 0 && text.trim().length > 0) {
        paragraphs = [text.trim().replace(/\n+/g, ' ').replace(/\s+/g, ' ')];
    }
    
    // Convert to HTML paragraphs
    return paragraphs.map(para => `<p>${para}</p>`).join('\n');
}
```

### Fix 4: Update the convertUrlsToLinks Function
Enhance the existing function to better handle links:

```javascript
function convertUrlsToLinks(text) {
    // Skip if already contains HTML tags (already processed)
    if (text.includes('<a href=')) {
        return text;
    }
    
    let result = text;
    
    // Handle email addresses (more comprehensive regex)
    const emailRegex = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/gi;
    result = result.replace(emailRegex, '<a href="mailto:$1" style="text-decoration: underline; color: #1d4ed8;">$1</a>');
    
    // Handle URLs (improved regex)
    const urlRegex = /(https?:\/\/[^\s<>"'\[\]{}|\\^`]+)/gi;
    result = result.replace(urlRegex, '<a href="$1" target="_blank" style="text-decoration: underline; color: #1d4ed8;">$1</a>');
    
    // Handle www domains
    const wwwRegex = /(www\.[a-zA-Z0-9-]+\.[a-zA-Z]{2,}(?:\.[a-zA-Z]{2,})?(?:\/[^\s]*)?)/gi;
    result = result.replace(wwwRegex, '<a href="https://$1" target="_blank" style="text-decoration: underline; color: #1d4ed8;">$1</a>');
    
    // Handle domain names (more careful to avoid false positives)
    const domainRegex = /(?<![@\/])\b([a-zA-Z0-9-]+\.[a-zA-Z]{2,}(?:\.[a-zA-Z]{2,})?)\b(?![@\/])/gi;
    result = result.replace(domainRegex, (match, domain) => {
        // Skip if already part of an email or URL
        if (result.includes(`@${domain}`) || result.includes(`//${domain}`) || result.includes(`www.${domain}`)) {
            return match;
        }
        // Skip common file extensions
        if (match.match(/\.(pdf|doc|docx|xls|xlsx|jpg|png|gif)$/i)) {
            return match;
        }
        return `<a href="https://${domain}" target="_blank" style="text-decoration: underline; color: #1d4ed8;">${domain}</a>`;
    });
    
    // Handle bold formatting
    result = result.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    
    return result;
}
```

### Fix 5: Update Event Listeners
Make sure the paste event is properly attached:

```javascript
// Add this to the document ready function
document.addEventListener('DOMContentLoaded', function() {
    // Attach paste handlers to content areas
    const descriptionField = document.getElementById('description');
    const contentField = document.getElementById('content');
    
    if (descriptionField) {
        descriptionField.addEventListener('paste', (e) => handlePaste(e, 'description'));
    }
    
    if (contentField) {
        contentField.addEventListener('paste', (e) => handlePaste(e, 'content'));
    }
    
    loadContent();
});
```

## Testing Instructions

After implementing these fixes, test with:

1. **Word document with links** - Copy text containing hyperlinks from Word
2. **Word document with emails** - Copy text containing email addresses  
3. **Word document with mixed content** - Copy text with paragraphs, links, emails, and bold text
4. **Plain text with URLs** - Type or paste plain URLs to ensure auto-detection works
5. **French content** - Test with French communiqués containing accented characters

## Expected Results

After fixes:
- ✅ Word links should remain clickable and underlined
- ✅ Email addresses should be automatically linked with underlines  
- ✅ URLs should be automatically detected and linked with underlines
- ✅ Paragraphs should be properly separated
- ✅ Bold formatting should be preserved
- ✅ French characters should be handled correctly

## Implementation Priority

1. **FIRST**: Fix the paste handling to properly capture Word HTML
2. **SECOND**: Add Word HTML cleaning function
3. **THIRD**: Enhance text processing for better paragraph detection
4. **FOURTH**: Update link detection and formatting
5. **FIFTH**: Test thoroughly with real Word documents