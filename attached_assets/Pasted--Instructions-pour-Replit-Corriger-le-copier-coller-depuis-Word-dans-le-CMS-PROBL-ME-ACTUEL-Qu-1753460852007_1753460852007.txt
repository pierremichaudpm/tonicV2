# Instructions pour Replit: Corriger le copier-coller depuis Word dans le CMS

## PROBL√àME ACTUEL
Quand on copie-colle des communiqu√©s ou offres d'emploi depuis Word dans le CMS, le formatage n'est pas pr√©serv√© correctement. Il faut que le syst√®me conserve:
- Les paragraphes
- Les liens hypertextes (soulign√©s)
- Les liens web (soulign√©s) 
- Les liens email (soulign√©s)
- Le texte en gras
- Les titres avec police plus grande

## SOLUTION √Ä IMPL√âMENTER

### 1. REMPLACER la fonction `handlePaste()` (lignes ~200-280)

Remplacez la fonction `handlePaste()` existante par cette version simplifi√©e:

```javascript
function handlePaste(event, fieldId) {
    console.log('üî• PASTE EVENT TRIGGERED for field:', fieldId);
    
    // Prevent default paste behavior
    event.preventDefault();
    
    const clipboardData = event.clipboardData || window.clipboardData;
    if (!clipboardData) {
        console.log('‚ö†Ô∏è No clipboard data available');
        return;
    }
    
    console.log('üìã Available clipboard types:', Array.from(clipboardData.types));
    
    let processedContent = '';
    
    // Try HTML first (preserves Word formatting)
    if (clipboardData.types.includes('text/html')) {
        const htmlData = clipboardData.getData('text/html');
        console.log('üìÑ Processing HTML data');
        processedContent = processWordHTML(htmlData);
    }
    
    // Fallback to plain text
    if (!processedContent || processedContent.trim().length === 0) {
        const plainText = clipboardData.getData('text/plain') || clipboardData.getData('text') || '';
        console.log('üìù Processing plain text');
        processedContent = processPlainText(plainText);
    }
    
    if (!processedContent || processedContent.trim().length === 0) {
        console.log('‚ö†Ô∏è No usable content found');
        return;
    }
    
    // Update textarea with plain text version for editing
    const textarea = document.getElementById(fieldId);
    if (!textarea) {
        console.error('‚ùå Textarea not found:', fieldId);
        return;
    }
    
    // Store processed HTML and show plain text for editing
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = processedContent;
    const plainTextForEditing = tempDiv.textContent || tempDiv.innerText || '';
    
    textarea.value = plainTextForEditing;
    textarea.setAttribute('data-processed-content', processedContent);
    
    // Show preview
    showContentPreview(fieldId, processedContent);
    
    console.log('‚úÖ Paste processing completed successfully');
}
```

### 2. AJOUTER la nouvelle fonction `processWordHTML()`

Ajoutez cette fonction apr√®s `handlePaste()`:

```javascript
function processWordHTML(html) {
    if (!html || html.trim().length === 0) return '';
    
    console.log('üîç Processing Word HTML');
    
    // Create temporary container
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    // Remove Word-specific elements
    const unwantedElements = tempDiv.querySelectorAll('meta, style, script, xml, o\\:*, w\\:*');
    unwantedElements.forEach(el => el.remove());
    
    // Process all elements to preserve formatting
    const processedHTML = processElementsRecursively(tempDiv);
    
    // Convert to proper paragraphs and clean up
    return cleanAndStructureParagraphs(processedHTML);
}

function processElementsRecursively(element) {
    let result = '';
    
    for (let node of element.childNodes) {
        if (node.nodeType === Node.TEXT_NODE) {
            const text = node.textContent.trim();
            if (text) {
                result += text + ' ';
            }
        } else if (node.nodeType === Node.ELEMENT_NODE) {
            const tagName = node.tagName.toLowerCase();
            const style = node.style || {};
            const childContent = processElementsRecursively(node);
            
            if (!childContent.trim()) continue;
            
            // Handle different elements
            if (tagName === 'p' || tagName === 'div') {
                result += `\n${childContent}\n`;
            } else if (tagName === 'br') {
                result += '\n';
            } else if (tagName === 'a' && node.href) {
                result += `<a href="${node.href}" style="text-decoration: underline; color: #1d4ed8;" target="_blank">${childContent}</a>`;
            } else if (tagName === 'strong' || tagName === 'b' || 
                       (style.fontWeight && (style.fontWeight === 'bold' || parseInt(style.fontWeight) >= 700))) {
                result += `<strong>${childContent}</strong>`;
            } else if (tagName === 'em' || tagName === 'i' || style.fontStyle === 'italic') {
                result += `<em>${childContent}</em>`;
            } else if (tagName.match(/^h[1-6]$/) || 
                       (style.fontSize && (parseInt(style.fontSize) > 14 || style.fontSize.includes('large')))) {
                result += `<strong style="font-size: 1.2em; display: block; margin: 10px 0;">${childContent}</strong>`;
            } else {
                result += childContent;
            }
        }
    }
    
    return result;
}
```

### 3. AJOUTER la fonction `cleanAndStructureParagraphs()`

```javascript
function cleanAndStructureParagraphs(html) {
    if (!html) return '';
    
    // Convert URLs and emails to links first
    html = convertUrlsAndEmailsToLinks(html);
    
    // Split into paragraphs based on line breaks
    const paragraphs = html.split(/\n\s*\n+/)
        .map(para => para.trim().replace(/\n+/g, ' ').replace(/\s+/g, ' '))
        .filter(para => para.length > 0);
    
    // Wrap non-HTML paragraphs in <p> tags
    return paragraphs.map(para => {
        // If already contains block elements, don't wrap
        if (para.includes('<strong style="font-size') || para.includes('<h')) {
            return para;
        }
        return `<p>${para}</p>`;
    }).join('\n');
}
```

### 4. REMPLACER la fonction `convertUrlsToLinks()` (lignes ~100-150)

Remplacez par cette version am√©lior√©e:

```javascript
function convertUrlsAndEmailsToLinks(text) {
    if (!text) return '';
    
    // Skip if already contains HTML links
    if (text.includes('<a href=')) {
        return text;
    }
    
    let result = text;
    
    // 1. Email addresses (plus comprehensive)
    const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;
    result = result.replace(emailRegex, '<a href="mailto:$&" style="text-decoration: underline; color: #1d4ed8;">$&</a>');
    
    // 2. URLs with protocols
    const urlRegex = /https?:\/\/[^\s<>"'\[\]{}|\\^`]+[^\s<>"'\[\]{}|\\^`.,;:!?]/g;
    result = result.replace(urlRegex, '<a href="$&" target="_blank" style="text-decoration: underline; color: #1d4ed8;">$&</a>');
    
    // 3. www domains
    const wwwRegex = /\bwww\.[A-Za-z0-9-]+\.[A-Za-z]{2,}(?:\.[A-Za-z]{2,})?(?:\/[^\s]*)?/g;
    result = result.replace(wwwRegex, '<a href="https://$&" target="_blank" style="text-decoration: underline; color: #1d4ed8;">$&</a>');
    
    // 4. Common domain patterns (careful with false positives)
    const domainRegex = /\b(?<![@\/])[A-Za-z0-9-]+\.(?:com|org|net|edu|gov|ca|fr|co\.uk)\b(?![@\/])/g;
    result = result.replace(domainRegex, (match) => {
        // Skip if it's part of an email or already linked
        if (result.includes(`@${match}`) || result.includes(`//${match}`) || result.includes(`>${match}<`)) {
            return match;
        }
        return `<a href="https://${match}" target="_blank" style="text-decoration: underline; color: #1d4ed8;">${match}</a>`;
    });
    
    return result;
}
```

### 5. AJOUTER la fonction `processPlainText()` (pour le fallback)

```javascript
function processPlainText(text) {
    if (!text || text.trim().length === 0) return '';
    
    console.log('üìù Processing plain text');
    
    // Clean up Word special characters
    text = text.replace(/[\u2018\u2019]/g, "'") // Smart quotes
                .replace(/[\u201C\u201D]/g, '"') // Smart quotes
                .replace(/\u2013/g, '-') // En dash
                .replace(/\u2014/g, '--') // Em dash
                .replace(/\u2026/g, '...') // Ellipsis
                .replace(/\u00A0/g, ' '); // Non-breaking space
    
    // Convert URLs and emails to links
    text = convertUrlsAndEmailsToLinks(text);
    
    // Split into paragraphs
    const paragraphs = text.split(/\n\s*\n+/)
        .map(para => para.trim().replace(/\n+/g, ' ').replace(/\s+/g, ' '))
        .filter(para => para.length > 10);
    
    // If no clear paragraphs, split on sentence patterns that indicate new paragraphs
    if (paragraphs.length <= 1 && text.length > 100) {
        const sentences = text.split(/(?<=[.!?])\s+(?=[A-Z√Ä√â√à√ä√ã√è√é√î√ñ√ô√ö√õ√ú≈∏√á])/);
        return sentences.map(sentence => `<p>${sentence.trim()}</p>`).join('\n');
    }
    
    return paragraphs.map(para => `<p>${para}</p>`).join('\n');
}
```

### 6. AM√âLIORER la fonction `showContentPreview()`

Remplacez la fonction existante par:

```javascript
function showContentPreview(fieldId, content) {
    console.log('üëÅÔ∏è Showing preview for field:', fieldId);
    
    const previewDiv = document.getElementById(fieldId + 'Preview');
    const previewText = document.getElementById(fieldId + 'PreviewText');
    
    if (previewDiv && previewText && content) {
        // Show formatted HTML preview (preserves links, bold, etc.)
        const shortPreview = content.length > 400 ? content.substring(0, 400) + '...' : content;
        previewText.innerHTML = shortPreview; // Use innerHTML to show formatting
        previewDiv.style.display = 'block';
        
        console.log('‚úÖ Preview updated with formatted content');
    } else {
        console.log('‚ö†Ô∏è Preview elements not found or no content');
    }
}
```

## TESTER LA SOLUTION

Pour tester que √ßa fonctionne:

1. Copiez un communiqu√© Word avec:
   - Titre en gras
   - Paragraphes
   - Liens web (ex: www.groupetonic.com)
   - Emails (ex: contact@groupetonic.com)
   - Texte en gras

2. Collez dans le champ Description/Contenu

3. V√©rifiez que l'aper√ßu montre:
   - ‚úÖ Paragraphes s√©par√©s
   - ‚úÖ Liens soulign√©s et cliquables
   - ‚úÖ Texte en gras
   - ‚úÖ Titles plus grands

## POINTS IMPORTANTS

- ‚ö†Ô∏è Supprimez les anciennes fonctions conflictuelles (`simpleWordFormatPreservation`, `cleanAndPreserveWordFormatting`, `cleanWordHTML`)
- ‚úÖ Gardez les fonctions `saveItem()` et `loadContent()` inchang√©es
- ‚úÖ Cette solution fonctionne sur mobile et desktop
- ‚úÖ Pr√©serve le formatage Word tout en gardant le code simple