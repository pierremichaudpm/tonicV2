Looking at your code, I see the issue. The `simple-content.js` file is likely interfering with your mobile menu. Here's a more robust fix:

## Complete Fix for Mobile Menu

### Replace the entire script section (lines 362-418) with this:

```javascript
<script>
    // CRITICAL: Block ALL external script interference BEFORE they load
    (function() {
        // Store original functions we need to protect
        window._protectedFunctions = {
            toggleMobileMenu: null
        };
        
        // Block initializeNavigation completely
        Object.defineProperty(window, 'initializeNavigation', {
            value: function() { 
                console.log('Blocked initializeNavigation'); 
            },
            writable: false,
            configurable: false
        });
        
        // Block any attempts to modify our protected elements
        const protectElement = (id) => {
            Object.defineProperty(window, `_protected_${id}`, {
                value: true,
                writable: false,
                configurable: false
            });
        };
        
        // Protect our mobile menu
        protectElement('mobileMenu');
        protectElement('toggleMobileMenu');
    })();

    // Define our mobile menu function IMMEDIATELY
    window.toggleMobileMenu = function() {
        console.log('toggleMobileMenu called');
        const mobileMenu = document.getElementById('mobileMenu');
        
        if (!mobileMenu) {
            console.error('Mobile menu element not found');
            return;
        }

        if (mobileMenu.classList.contains('active')) {
            console.log('Closing mobile menu');
            mobileMenu.classList.remove('active');
            mobileMenu.style.display = 'none';
            document.body.style.overflow = '';
        } else {
            console.log('Opening mobile menu');
            mobileMenu.style.display = 'flex';
            mobileMenu.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
    };
    
    // Protect the function from being overwritten
    Object.defineProperty(window, 'toggleMobileMenu', {
        value: window.toggleMobileMenu,
        writable: false,
        configurable: false
    });

    // Simple inline tooltip system
    document.addEventListener('DOMContentLoaded', function() {
        // Ensure our mobile menu function survives
        const mobileMenuButton = document.querySelector('button[onclick="toggleMobileMenu()"]');
        if (mobileMenuButton) {
            // Remove the onclick attribute and add event listener instead
            mobileMenuButton.removeAttribute('onclick');
            mobileMenuButton.addEventListener('click', window.toggleMobileMenu);
        }
        
        // Create tooltip element
        const tooltip = document.createElement('div');
        tooltip.style.cssText = `
            position: fixed;
            background: #333;
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            white-space: nowrap;
            z-index: 999999;
            pointer-events: none;
            border: 2px solid #fff;
            box-shadow: 0 4px 12px rgba(0,0,0,0.8);
            opacity: 0;
            transition: opacity 0.2s ease;
            display: none;
        `;
        document.body.appendChild(tooltip);

        // Find social media links
        const socialLinks = document.querySelectorAll('a[data-tooltip="Instagram"], a[data-tooltip="LinkedIn"]');

        socialLinks.forEach(link => {
            const tooltipText = link.getAttribute('data-tooltip');

            link.addEventListener('mouseenter', function(e) {
                tooltip.textContent = tooltipText;
                tooltip.style.display = 'block';

                // Plain white tooltips
                tooltip.style.background = '#333';
                tooltip.style.color = 'white';

                const rect = link.getBoundingClientRect();
                tooltip.style.left = (rect.left + rect.width/2 - 50) + 'px';
                tooltip.style.top = (rect.bottom + 10) + 'px';
                tooltip.style.opacity = '1';
            });

            link.addEventListener('mouseleave', function() {
                tooltip.style.opacity = '0';
                setTimeout(() => {
                    tooltip.style.display = 'none';
                }, 200);
            });
        });
    });
</script>
```

### Then, find where the external scripts are loaded (around line 725-730) and modify them:

**FIND:**
```html
<!-- Load news data -->
<script src="js/communiques-data.js?v=1753723200&cache=false"></script>

<!-- Simple Content -->
<script src="js/simple-content.js?v=1753723200&cache=false"></script>
```

**REPLACE WITH:**
```html
<!-- Load news data -->
<script src="js/communiques-data.js?v=1753723200&cache=false"></script>

<!-- Block Simple Content from interfering -->
<script>
    // Capture any global functions that might interfere
    (function() {
        const originalToggle = window.toggleMobileMenu;
        
        // Create a proxy to intercept script loading
        const scriptLoadHandler = function() {
            // Restore our protected function
            if (window.toggleMobileMenu !== originalToggle) {
                console.warn('Restoring toggleMobileMenu function');
                window.toggleMobileMenu = originalToggle;
            }
        };
        
        // Monitor for changes
        setInterval(scriptLoadHandler, 100);
    })();
</script>

<!-- Simple Content -->
<script src="js/simple-content.js?v=1753723200&cache=false"></script>
```

### Finally, remove the duplicate toggleMobileMenu function (around line 847-877) since we've already defined it at the top.

## Alternative Nuclear Option:
If the above still doesn't work, comment out the simple-content.js script entirely:

```html
<!-- Simple Content - DISABLED DUE TO CONFLICTS -->
<!-- <script src="js/simple-content.js?v=1753723200&cache=false"></script> -->
```

This approach:
1. Defines and protects the mobile menu function BEFORE any external scripts load
2. Uses event listeners instead of onclick attributes
3. Monitors and restores the function if it gets overwritten
4. Provides a nuclear option to disable the problematic script entirely