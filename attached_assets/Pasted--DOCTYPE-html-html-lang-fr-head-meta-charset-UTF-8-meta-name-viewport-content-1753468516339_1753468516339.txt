<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CMS √âditable - Groupe Tonic</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- 
    FORMATTING SYSTEM STATUS:
    - HTML preview now shows formatted content (bold, italic, links)
    - Paste from Word preserves formatting
    - Keyboard shortcuts: Ctrl+B (bold), Ctrl+I (italic), Ctrl+U (underline)
    
    TROUBLESHOOTING:
    If content shows without formatting, it was likely saved as plain text.
    Solutions:
    1. Use checkContent() in console to diagnose
    2. Use needsFormatting() to find items without HTML
    3. Edit the item and re-paste from Word
    4. Or manually add HTML tags in the textarea
    -->
    <style>
        .tonic-bg {
            background: linear-gradient(135deg, #fe4445 0%, #ff6667 50%, #fe4445 100%);
            background-size: 300% 300%;
            animation: gradientShift 8s ease-in-out infinite;
        }
        
        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        /* Hide browser notification popups and overlays */
        .notification-overlay,
        [role="dialog"][aria-label*="notification"],
        [data-testid*="notification"] {
            display: none !important;
        }
        
        /* Ensure modal appears above any browser popups */
        #editModal {
            z-index: 999999 !important;
        }
        
        /* Debug console styles */
        #debugConsole {
            position: fixed;
            bottom: 10px;
            right: 10px;
            width: 400px;
            max-height: 300px;
            background: #000;
            color: #0f0;
            padding: 10px;
            border-radius: 5px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 12px;
            z-index: 9999;
            display: none;
        }
        
        #debugToggle {
            position: fixed;
            bottom: 10px;
            right: 420px;
            background: #333;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            z-index: 9999;
        }
        
        /* CMS content preview styles */
        .cms-content-preview p {
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .cms-content-preview p:last-child {
            margin-bottom: 0;
        }
        
        .cms-content-preview strong {
            font-weight: 700;
            color: #1a202c;
        }
        
        .cms-content-preview em {
            font-style: italic;
        }
        
        .cms-content-preview u {
            text-decoration: underline;
        }
        
        .cms-content-preview a {
            color: #1d4ed8;
            text-decoration: underline;
        }
        
        .cms-content-preview a:hover {
            color: #2563eb;
        }
        
        .cms-content-preview ul {
            list-style-type: disc;
            margin-left: 1.5rem;
            margin-bottom: 0.5rem;
        }
        
        .cms-content-preview ol {
            list-style-type: decimal;
            margin-left: 1.5rem;
            margin-bottom: 0.5rem;
        }
        
        .cms-content-preview li {
            margin-bottom: 0.25rem;
        }
    </style>
</head>
<body class="tonic-bg">
    <!-- Debug Console -->
    <div id="debugToggle" onclick="toggleDebugConsole()">Debug üêõ</div>
    <div id="debugConsole">
        <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
            <strong>Debug Console</strong>
            <button onclick="clearDebugConsole()" style="background: #444; padding: 2px 8px; border-radius: 3px;">Clear</button>
        </div>
        <div id="debugLog"></div>
    </div>

    <div class="min-h-screen">
        <!-- Header -->
        <header class="bg-white shadow-sm border-b">
            <div class="max-w-7xl mx-auto px-4 py-4">
                <!-- Mobile Layout: Stack everything -->
                <div class="flex flex-col gap-4 md:hidden">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-3">
                            <img src="/images/tonic-logo.png" alt="Groupe Tonic" class="h-8">
                        </div>
                        <button onclick="logout()" class="bg-red-500 text-white px-3 py-1.5 text-sm rounded hover:bg-red-600">
                            D√©connexion
                        </button>
                    </div>
                    <div class="flex gap-2">
                        <select id="contentType" class="flex-1 border rounded px-2 py-1.5 text-sm">
                            <option value="jobs">Emplois / Jobs</option>
                            <option value="news">Communiqu√©s / News</option>
                        </select>
                        <select id="language" class="border rounded px-2 py-1.5 text-sm">
                            <option value="fr">FR</option>
                            <option value="en">EN</option>
                        </select>
                        <button onclick="showAddForm()" class="bg-green-500 text-white px-3 py-1.5 text-sm rounded hover:bg-green-600">
                            + Add
                        </button>
                    </div>
                </div>
                
                <!-- Desktop Layout: Original horizontal layout -->
                <div class="hidden md:flex justify-between items-center">
                    <div class="flex items-center gap-3">
                        <img src="/images/tonic-logo.png" alt="Groupe Tonic" class="h-10">
                        <div>
                            <p class="text-sm text-gray-600">Syst√®me de Gestion de Contenu</p>
                        </div>
                    </div>
                    <div class="flex items-center gap-4">
                        <select id="contentTypeDesktop" class="border rounded px-3 py-2">
                            <option value="jobs">Emplois / Jobs</option>
                            <option value="news">Communiqu√©s / News</option>
                        </select>
                        <select id="languageDesktop" class="border rounded px-3 py-2">
                            <option value="fr">Fran√ßais</option>
                            <option value="en">English</option>
                        </select>
                        <button onclick="showAddForm()" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
                            + Ajouter
                        </button>
                        <button onclick="logout()" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
                            D√©connexion
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto px-4 py-8">
            <!-- Success Alert for Formatting -->
            <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4">
                <strong>üìã Diagnostic du formatage</strong>
                <ul class="text-sm mt-2 space-y-1">
                    <li>1. Ouvrez la console (F12) et utilisez <code class="bg-yellow-200 px-1">checkContent()</code> pour voir le contenu brut</li>
                    <li>2. Si le contenu n'a pas de HTML, utilisez <code class="bg-yellow-200 px-1">needsFormatting()</code> pour identifier les items</li>
                    <li>3. Pour rafra√Æchir l'affichage: <code class="bg-yellow-200 px-1">reprocessAllContent()</code></li>
                    <li>4. <strong>Solution:</strong> √âditez et recollez le contenu depuis Word pour r√©cup√©rer le formatage</li>
                </ul>
            </div>
            
            <div id="content" class="space-y-4">
                <!-- Content will be loaded here -->
            </div>
        </main>

        <!-- Edit Modal -->
        <div id="editModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 overflow-y-auto" onclick="closeModalOnBackdrop(event)">
            <div class="min-h-screen flex items-start justify-center p-2 pt-2 md:pt-4">
                <div class="bg-white rounded-lg w-full max-w-5xl min-h-[85vh] md:min-h-[80vh] max-h-[98vh] md:max-h-[95vh] overflow-hidden flex flex-col mt-2 md:mt-4 mb-2 md:mb-4" onclick="event.stopPropagation()">
                    <!-- Fixed Header -->
                    <div class="flex justify-between items-center p-4 bg-white border-b flex-shrink-0">
                        <h2 id="modalTitle" class="text-lg sm:text-xl font-bold">√âditer</h2>
                        <button onclick="closeModal()" class="text-gray-500 hover:text-red-500 text-3xl font-bold leading-none w-12 h-12 flex items-center justify-center rounded-full hover:bg-gray-100">&times;</button>
                    </div>
                    
                    <!-- Scrollable Content -->
                    <div class="flex-1 overflow-y-auto p-6">
                    <form id="editForm" class="space-y-4">
                        <input type="hidden" id="itemId">
                        
                        <!-- Job Fields -->
                        <div class="jobFields">
                            <div class="bg-gray-50 p-4 rounded-lg space-y-4">
                                <h3 class="font-semibold text-lg">Informations principales</h3>
                                <input type="text" id="title" placeholder="Titre du poste" class="w-full p-3 border rounded">
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <select id="department" class="p-3 border rounded">
                                        <option value="">S√©lectionner une cat√©gorie</option>
                                        <option value="Beach Pro Tour">Beach Pro Tour</option>
                                        <option value="Grands Prix Cyclistes">Grands Prix Cyclistes</option>
                                        <option value="Marathon Beneva 21K">Marathon Beneva 21K</option>
                                        <option value="UCI 2026">UCI 2026</option>
                                        <option value="Studio 76">Studio 76</option>
                                        <option value="Dock 619">Dock 619</option>
                                        <option value="21K de Montr√©al">21K de Montr√©al</option>
                                        <option value="Groupe Tonic">Groupe Tonic</option>
                                    </select>
                                    <input type="text" id="location" placeholder="Lieu de travail" class="p-3 border rounded">
                                    <input type="text" id="type" placeholder="Type (Temps plein, etc.)" class="p-3 border rounded">
                                    <input type="text" id="salary" placeholder="Salaire" class="p-3 border rounded">
                                    <input type="date" id="datePosted" placeholder="Date de publication" class="p-3 border rounded">
                                    <input type="text" id="deadline" placeholder="Date limite (ex: 28 juillet 2025)" class="p-3 border rounded">
                                </div>
                                <textarea id="summary" placeholder="R√©sum√© court (optionnel)" rows="2" class="w-full p-3 border rounded"></textarea>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h3 class="font-semibold text-lg mb-2">Description compl√®te</h3>
                                <p class="text-sm text-gray-600 mb-3">
                                    Copiez-collez directement depuis Word. Le syst√®me cr√©era automatiquement les paragraphes et liens.
                                    <span class="block mt-1 text-green-600">‚úì Formatage pr√©serv√©: <strong>gras</strong>, <em>italique</em>, liens</span>
                                    <span class="block mt-1 text-blue-600">‚å®Ô∏è Raccourcis: Ctrl+B (gras), Ctrl+I (italique), Ctrl+U (soulign√©)</span>
                                </p>
                                <textarea id="description" placeholder="Copiez-collez la description ici..." rows="15" class="w-full p-3 border rounded bg-white"
                                    oninput="validateContent()"
                                    onpaste="handlePaste(event, 'description')"></textarea>
                                <div id="descriptionPreview" class="mt-2 p-3 bg-gray-50 border rounded text-sm" style="display: none;">
                                    <strong>Aper√ßu du formatage:</strong> 
                                    <div id="descriptionPreviewText" class="mt-2 cms-content-preview"></div>
                                </div>
                            </div>
                        </div>

                        <!-- News Fields -->
                        <div class="newsFields hidden">
                            <div class="bg-gray-50 p-4 rounded-lg space-y-4">
                                <h3 class="font-semibold text-lg">Informations principales</h3>
                                <input type="text" id="newsTitle" placeholder="Titre du communiqu√©" class="w-full p-3 border rounded">
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <input type="date" id="date" placeholder="Date" class="p-3 border rounded">
                                    <select id="category" class="p-3 border rounded">
                                        <option value="">S√©lectionner une cat√©gorie</option>
                                        <option value="Beach Pro Tour">Beach Pro Tour</option>
                                        <option value="Grands Prix Cyclistes">Grands Prix Cyclistes</option>
                                        <option value="Marathon Beneva 21K">Marathon Beneva 21K</option>
                                        <option value="UCI 2026">UCI 2026</option>
                                        <option value="Studio 76">Studio 76</option>
                                        <option value="Dock 619">Dock 619</option>
                                        <option value="21K de Montr√©al">21K de Montr√©al</option>
                                        <option value="Groupe Tonic">Groupe Tonic</option>
                                    </select>
                                </div>
                                <textarea id="newsSummary" placeholder="R√©sum√© court" rows="2" class="w-full p-3 border rounded"></textarea>
                            </div>
                            
                            <div class="bg-purple-50 p-4 rounded-lg">
                                <h3 class="font-semibold text-lg mb-2">Contenu complet</h3>
                                <p class="text-sm text-gray-600 mb-3">
                                    Copiez-collez directement depuis Word. Le syst√®me cr√©era automatiquement les paragraphes et liens.
                                    <span class="block mt-1 text-green-600">‚úì Formatage pr√©serv√©: <strong>gras</strong>, <em>italique</em>, liens</span>
                                    <span class="block mt-1 text-blue-600">‚å®Ô∏è Raccourcis: Ctrl+B (gras), Ctrl+I (italique), Ctrl+U (soulign√©)</span>
                                </p>
                                <textarea id="content" placeholder="Copiez-collez le contenu ici..." rows="15" class="w-full p-3 border rounded bg-white" 
                                    oninput="validateContent()"
                                    onpaste="handlePaste(event, 'content')"></textarea>
                                <div id="contentPreview" class="mt-2 p-3 bg-gray-50 border rounded text-sm" style="display: none;">
                                    <strong>Aper√ßu du formatage:</strong> 
                                    <div id="contentPreviewText" class="mt-2 cms-content-preview"></div>
                                </div>
                            </div>
                        </div>

                        <div class="flex flex-col sm:flex-row gap-2 justify-end">
                            <button type="button" onclick="closeModal()" class="px-4 py-2 border rounded hover:bg-gray-100">
                                Annuler
                            </button>
                            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                Sauvegarder
                            </button>
                        </div>
                    </form>
                    </div> <!-- Close scrollable content div -->
                </div> <!-- Close modal content div -->
            </div> <!-- Close modal container div -->
        </div> <!-- Close modal wrapper div -->

    <!-- Custom Confirmation Dialog -->
    <div id="confirmDialog" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 class="text-lg font-semibold mb-4">Confirmation</h3>
            <p id="confirmMessage" class="text-gray-700 mb-6"></p>
            <div class="flex gap-3 justify-end">
                <button id="confirmCancel" class="px-4 py-2 border rounded hover:bg-gray-100">
                    Annuler
                </button>
                <button id="confirmOK" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
                    Supprimer
                </button>
            </div>
        </div>
    </div>

    <script>
        let currentType = 'jobs';
        let currentLang = 'fr';
        let currentData = [];

        // Simple password check
        const PASSWORD = 'admin123';
        
        // Debug logging system
        let debugMode = localStorage.getItem('debugMode') === 'true';
        
        function debugLog(message, data) {
            console.log(message, data);
            if (debugMode) {
                const debugLog = document.getElementById('debugLog');
                const timestamp = new Date().toLocaleTimeString();
                const entry = document.createElement('div');
                entry.style.marginBottom = '5px';
                entry.innerHTML = `<span style="color: #888;">[${timestamp}]</span> ${message}`;
                if (data !== undefined) {
                    entry.innerHTML += ` <span style="color: #ff0;">${JSON.stringify(data, null, 2)}</span>`;
                }
                debugLog.appendChild(entry);
                debugLog.scrollTop = debugLog.scrollHeight;
            }
        }
        
        function toggleDebugConsole() {
            const console = document.getElementById('debugConsole');
            debugMode = !debugMode;
            localStorage.setItem('debugMode', debugMode);
            console.style.display = debugMode ? 'block' : 'none';
            debugLog('Debug mode ' + (debugMode ? 'enabled' : 'disabled'));
        }
        
        function clearDebugConsole() {
            document.getElementById('debugLog').innerHTML = '';
        }
        
        // Initialize debug console state
        if (debugMode) {
            document.getElementById('debugConsole').style.display = 'block';
        }
        
        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            debugLog('üöÄ CMS Initialized');
            attachPasteHandlers();
            loadContent();
        });
        
        // Helper function to truncate HTML while preserving formatting
        function truncateHTML(html, maxLength) {
            // Create a temporary div to work with
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;
            
            let textLength = 0;
            let truncated = false;
            
            function truncateNode(node) {
                if (textLength >= maxLength) {
                    return '';
                }
                
                if (node.nodeType === Node.TEXT_NODE) {
                    const remainingLength = maxLength - textLength;
                    if (node.textContent.length <= remainingLength) {
                        textLength += node.textContent.length;
                        return node.textContent;
                    } else {
                        textLength = maxLength;
                        truncated = true;
                        return node.textContent.substring(0, remainingLength) + '...';
                    }
                } else if (node.nodeType === Node.ELEMENT_NODE) {
                    const tagName = node.tagName.toLowerCase();
                    let result = `<${tagName}`;
                    
                    // Preserve important attributes
                    if (tagName === 'a' && node.href) {
                        result += ` href="${node.href}"`;
                        if (node.target) result += ` target="${node.target}"`;
                        if (node.style) result += ` style="${node.style.cssText}"`;
                    } else if (node.style && node.style.cssText) {
                        result += ` style="${node.style.cssText}"`;
                    }
                    
                    result += '>';
                    
                    // Process children
                    for (let child of node.childNodes) {
                        if (textLength >= maxLength) break;
                        result += truncateNode(child);
                    }
                    
                    result += `</${tagName}>`;
                    return result;
                }
                
                return '';
            }
            
            let result = '';
            for (let child of tempDiv.childNodes) {
                if (textLength >= maxLength) break;
                result += truncateNode(child);
            }
            
            return result;
        }
        
        // Strip HTML tags from text
        function stripHtml(html) {
            const tmp = document.createElement('DIV');
            tmp.innerHTML = html;
            return tmp.textContent || tmp.innerText || '';
        }

        // Simple and robust URL conversion
        function convertUrlsToLinks(text) {
            if (!text) return text;
            
            let result = text;
            
            // √âviter double processing
            if (result.includes('<a href=')) {
                return result;
            }
            
            debugLog('üîó Converting URLs to links', text.substring(0, 50) + '...');
            
            // 1. Email addresses (simple et robuste)
            result = result.replace(
                /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g,
                '<a href="mailto:$1" style="text-decoration: underline; color: #1d4ed8;">$1</a>'
            );
            
            // 2. URLs avec protocole
            result = result.replace(
                /(https?:\/\/[^\s<>"']+)/g,
                '<a href="$1" target="_blank" style="text-decoration: underline; color: #1d4ed8;">$1</a>'
            );
            
            // 3. Domaines www
            result = result.replace(
                /\b(www\.[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}[^\s<>"']*)/g,
                '<a href="https://$1" target="_blank" style="text-decoration: underline; color: #1d4ed8;">$1</a>'
            );
            
            return result;
        }
        
        // Properly attach paste handlers
        function attachPasteHandlers() {
            const descriptionField = document.getElementById('description');
            const contentField = document.getElementById('content');
            
            if (descriptionField) {
                debugLog('‚úÖ Description field found');
            }
            
            if (contentField) {
                debugLog('‚úÖ Content field found');
            }
        }

        // Enhanced paste handling with debugging
        function handlePaste(event, fieldId) {
            debugLog('üìã PASTE EVENT for field:', fieldId);
            
            const clipboardData = event.clipboardData || window.clipboardData;
            if (!clipboardData) {
                debugLog('‚ö†Ô∏è No clipboard data');
                return;
            }
            
            const types = Array.from(clipboardData.types);
            debugLog('üìã Clipboard types:', types);
            
            let processedHTML = '';
            
            // Try HTML first
            if (clipboardData.types.includes('text/html')) {
                const htmlData = clipboardData.getData('text/html');
                debugLog('üìÑ HTML data length:', htmlData.length);
                if (htmlData && htmlData.trim().length > 0) {
                    processedHTML = processWordHTMLSimple(htmlData);
                    debugLog('‚úÖ Processed HTML length:', processedHTML.length);
                }
            }
            
            // Try plain text as fallback
            if (!processedHTML || processedHTML.trim().length === 0) {
                const rawText = clipboardData.getData('text/plain') || clipboardData.getData('text') || '';
                debugLog('üìù Plain text length:', rawText.length);
                if (rawText && rawText.trim().length > 0) {
                    processedHTML = processPlainTextSimple(rawText);
                    debugLog('‚úÖ Processed plain text length:', processedHTML.length);
                }
            }
            
            const textarea = document.getElementById(fieldId);
            if (!textarea) {
                debugLog('‚ùå Textarea not found:', fieldId);
                return;
            }
            
            // Process after browser paste
            setTimeout(() => {
                debugLog('‚è∞ Post-paste processing');
                
                let finalHTML = processedHTML;
                if (!finalHTML || finalHTML.trim().length === 0) {
                    const textareaContent = textarea.value;
                    if (textareaContent && textareaContent.trim().length > 0) {
                        finalHTML = convertTextToParagraphs(textareaContent);
                        debugLog('üìù Used textarea fallback');
                    }
                }
                
                // Store and show
                textarea.setAttribute('data-processed-content', finalHTML);
                showContentPreview(fieldId, finalHTML);
                
                debugLog('‚úÖ Paste complete, HTML stored:', finalHTML.substring(0, 100) + '...');
            }, 150);
        }

        // Helper function to escape regex special characters
        function escapeRegex(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        }

        // Simple Word HTML processing
        function processWordHTMLSimple(html) {
            if (!html || html.trim().length === 0) return '';
            
            debugLog('üîç Processing Word HTML');
            
            try {
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
                
                // Remove unwanted elements
                const unwanted = tempDiv.querySelectorAll('meta, style, script, xml');
                unwanted.forEach(el => el.remove());
                
                // Get all text content
                let allText = tempDiv.textContent || tempDiv.innerText || '';
                debugLog('üìù Extracted text:', allText.substring(0, 100) + '...');
                
                if (!allText || allText.trim().length === 0) {
                    return '';
                }
                
                // Convert to paragraphs and add links
                const result = convertTextToParagraphs(allText);
                return result;
                
            } catch (error) {
                debugLog('‚ùå Error processing HTML:', error.message);
                return '';
            }
        }

        // Convert text to paragraphs
        function convertTextToParagraphs(text) {
            if (!text || text.trim().length === 0) return '';
            
            debugLog('üìÑ Converting to paragraphs');
            
            // Split on double line breaks
            let paragraphs = text.split(/\n\s*\n+/);
            
            // If no clear paragraph breaks, split on single line breaks
            if (paragraphs.length <= 1) {
                paragraphs = text.split(/\n+/);
            }
            
            // Clean and filter
            paragraphs = paragraphs
                .map(para => para.trim().replace(/\s+/g, ' '))
                .filter(para => para.length > 3);
            
            if (paragraphs.length === 0) {
                paragraphs = [text.trim()];
            }
            
            // Convert to HTML with links
            const result = paragraphs
                .map(para => {
                    const withLinks = convertUrlsToLinks(para);
                    return `<p>${withLinks}</p>`;
                })
                .join('\n');
            
            debugLog('‚úÖ Created', paragraphs.length, 'paragraphs');
            return result;
        }

        // Process plain text
        function processPlainTextSimple(text) {
            if (!text || text.trim().length === 0) return '';
            
            debugLog('üìù Processing plain text');
            
            try {
                // Clean up text
                let cleanText = text
                    .replace(/\r\n/g, '\n')
                    .replace(/\r/g, '\n')
                    .replace(/[\u2018\u2019]/g, "'")
                    .replace(/[\u201C\u201D]/g, '"')
                    .replace(/\u2013/g, '-')
                    .replace(/\u2014/g, '‚Äî')
                    .replace(/\u2026/g, '...')
                    .replace(/\u00A0/g, ' ');
                
                const result = convertTextToParagraphs(cleanText);
                return result;
                
            } catch (error) {
                debugLog('‚ùå Error processing text:', error.message);
                return `<p>${text}</p>`;
            }
        }
        
        // Process Word content (fallback)
        function processWordContent(text) {
            if (!text || text.trim().length === 0) return '';
            
            debugLog('üìù Processing Word content (fallback)');
            
            // Clean up special characters
            text = text.replace(/[\u2018\u2019]/g, "'");
            text = text.replace(/[\u201C\u201D]/g, '"');
            text = text.replace(/\u2013/g, '-');
            text = text.replace(/\u2014/g, '--');
            text = text.replace(/\u2026/g, '...');
            text = text.replace(/\u00A0/g, ' ');
            
            // Convert to paragraphs
            return convertTextToParagraphs(text);
        }
        
        // Show content preview
        function showContentPreview(fieldId, content) {
            debugLog('üëÅÔ∏è Showing preview for:', fieldId);
            
            const previewDiv = document.getElementById(fieldId + 'Preview');
            const previewText = document.getElementById(fieldId + 'PreviewText');
            
            if (previewDiv && previewText && content) {
                const shortPreview = content.length > 300 ? content.substring(0, 300) + '...' : content;
                previewText.innerHTML = shortPreview;
                previewDiv.style.display = 'block';
                debugLog('‚úÖ Preview shown');
            }
        }
        
        // Validate content
        function validateContent() {
            try {
                const contentField = document.getElementById('content');
                const descriptionField = document.getElementById('description');
                
                if (contentField && contentField.value) {
                    debugLog('üìù Content field:', contentField.value.length + ' chars');
                }
                if (descriptionField && descriptionField.value) {
                    debugLog('üìù Description field:', descriptionField.value.length + ' chars');
                }
            } catch (error) {
                debugLog('‚ùå Validate error:', error.message);
            }
        }

        // Sync dropdowns
        function syncDropdowns() {
            const mobileContentType = document.getElementById('contentType');
            const desktopContentType = document.getElementById('contentTypeDesktop');
            const mobileLanguage = document.getElementById('language');
            const desktopLanguage = document.getElementById('languageDesktop');
            
            mobileContentType.addEventListener('change', (e) => {
                currentType = e.target.value;
                desktopContentType.value = e.target.value;
                toggleFieldVisibility();
                loadContent();
            });
            
            desktopContentType.addEventListener('change', (e) => {
                currentType = e.target.value;
                mobileContentType.value = e.target.value;
                toggleFieldVisibility();
                loadContent();
            });
            
            mobileLanguage.addEventListener('change', (e) => {
                currentLang = e.target.value;
                desktopLanguage.value = e.target.value;
                loadContent();
            });
            
            desktopLanguage.addEventListener('change', (e) => {
                currentLang = e.target.value;
                mobileLanguage.value = e.target.value;
                loadContent();
            });
        }
        
        syncDropdowns();

        document.getElementById('editForm').addEventListener('submit', saveItem);

        function toggleFieldVisibility() {
            const jobFields = document.querySelector('.jobFields');
            const newsFields = document.querySelector('.newsFields');
            
            if (currentType === 'jobs') {
                jobFields.classList.remove('hidden');
                newsFields.classList.add('hidden');
            } else {
                jobFields.classList.add('hidden');
                newsFields.classList.remove('hidden');
            }
        }

        function logout() {
            window.location.href = '/admin/';
        }

        // Fetch with auth
        async function fetchWithAuth(url, options = {}) {
            const response = await fetch(url, {
                ...options,
                headers: {
                    'X-Admin-Password': PASSWORD,
                    'Content-Type': 'application/json',
                    ...options.headers
                }
            });

            if (response.status === 401 || response.status === 403) {
                window.location.href = '/admin/';
                return null;
            }

            return response;
        }

        async function loadContent() {
            try {
                debugLog('üì° Loading content:', { type: currentType, lang: currentLang });
                
                const response = await fetchWithAuth(`/api/cms/${currentType}?lang=${currentLang}`);
                
                if (!response) return;

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();
                debugLog('üì¶ Received data:', data);
                
                currentData = currentType === 'jobs' ? data.jobs : data.news;
                displayContent(currentData);
            } catch (error) {
                debugLog('‚ùå Load error:', error.message);
            }
        }

        function displayContent(items) {
            const container = document.getElementById('content');
            
            debugLog('üé® Displaying items:', items.length);
            
            if (!items || items.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-center py-8">Aucun contenu</p>';
                return;
            }

            container.innerHTML = items.map((item, index) => {
                debugLog(`üìÑ Item ${index}:`, {
                    id: item.id,
                    title: item.title || item.newsTitle,
                    hasContent: !!(currentType === 'jobs' ? item.description : item.content),
                    contentLength: currentType === 'jobs' ? 
                        (item.description ? item.description.length : 0) : 
                        (item.content ? item.content.length : 0)
                });
                
                if (currentType === 'jobs') {
                    // Use HTML preview with formatting
                    let descPreview = '';
                    if (item.description) {
                        // Create a truncated HTML preview that preserves formatting
                        const temp = document.createElement('div');
                        temp.innerHTML = item.description;
                        
                        // Get first 200 characters of text to know where to cut
                        const fullText = temp.textContent || temp.innerText || '';
                        if (fullText.length > 200) {
                            // Truncate the HTML intelligently
                            descPreview = truncateHTML(item.description, 200);
                        } else {
                            descPreview = item.description;
                        }
                    }
                    
                    return `
                        <div class="bg-white rounded-lg shadow p-4 md:p-6">
                            <div class="block md:flex md:justify-between md:items-start">
                                <div class="w-full md:flex-1 md:pr-4">
                                    <h3 class="text-xl font-bold text-blue-600">${item.title || ''}</h3>
                                    <div class="text-sm text-gray-600 mt-2">
                                        <strong>Department:</strong> ${item.department || 'N/A'} | 
                                        <strong>Location:</strong> ${item.location || item.lieu || 'N/A'} | 
                                        <strong>Type:</strong> ${item.type || 'N/A'}
                                    </div>
                                    ${descPreview ? `<div class="mt-3 text-gray-700 border-l-4 border-blue-200 pl-4 text-sm leading-relaxed w-full cms-content-preview">
                                        <strong>Description:</strong><br><div class="mt-1">${descPreview}</div>
                                    </div>` : '<div class="mt-3 text-gray-500 italic">No description available</div>'}
                                </div>
                                <div class="flex gap-2 mt-4 md:mt-0 md:flex-col md:gap-2">
                                    <button onclick="editItem(${item.id})" class="bg-blue-500 text-white px-3 py-2 rounded text-sm hover:bg-blue-600 flex-1 md:flex-none">
                                        √âditer
                                    </button>
                                    <button onclick="deleteItem(${item.id})" class="bg-red-500 text-white px-3 py-2 rounded text-sm hover:bg-red-600 flex-1 md:flex-none">
                                        Supprimer
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    // Use HTML preview with formatting
                    let contentPreview = '';
                    if (item.content) {
                        // Create a truncated HTML preview that preserves formatting
                        const temp = document.createElement('div');
                        temp.innerHTML = item.content;
                        
                        // Get first 200 characters of text to know where to cut
                        const fullText = temp.textContent || temp.innerText || '';
                        if (fullText.length > 200) {
                            // Truncate the HTML intelligently
                            contentPreview = truncateHTML(item.content, 200);
                        } else {
                            contentPreview = item.content;
                        }
                    }
                    
                    return `
                        <div class="bg-white rounded-lg shadow p-4 md:p-6">
                            <div class="block md:flex md:justify-between md:items-start">
                                <div class="w-full md:flex-1 md:pr-4">
                                    <h3 class="text-xl font-bold text-purple-600">${item.title || ''}</h3>
                                    <div class="text-sm text-gray-600 mt-2">
                                        <strong>Date:</strong> ${item.date || 'N/A'} | 
                                        <strong>Category:</strong> ${item.category || 'N/A'}
                                    </div>
                                    ${contentPreview ? `<div class="mt-3 text-gray-700 border-l-4 border-purple-200 pl-4 pr-2 text-sm leading-relaxed cms-content-preview">
                                        <strong>Content:</strong><br><div class="mt-1">${contentPreview}</div>
                                    </div>` : '<div class="mt-3 text-gray-500 italic">No content available</div>'}
                                </div>
                                <div class="flex gap-2 mt-4 md:mt-0 md:flex-col md:gap-2">
                                    <button onclick="editItem(${item.id})" class="bg-purple-500 text-white px-3 py-2 rounded text-sm hover:bg-purple-600 flex-1 md:flex-none">
                                        √âditer
                                    </button>
                                    <button onclick="deleteItem(${item.id})" class="bg-red-500 text-white px-3 py-2 rounded text-sm hover:bg-red-600 flex-1 md:flex-none">
                                        Supprimer
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                }
            }).join('');
        }

        function showAddForm() {
            debugLog('‚ûï Showing add form');
            document.getElementById('modalTitle').textContent = 'Ajouter';
            document.getElementById('editForm').reset();
            document.getElementById('itemId').value = '';
            
            // Clear processed content
            const descField = document.getElementById('description');
            const contentField = document.getElementById('content');
            if (descField) descField.removeAttribute('data-processed-content');
            if (contentField) contentField.removeAttribute('data-processed-content');
            
            toggleFieldVisibility();
            document.getElementById('editModal').classList.remove('hidden');
        }

        function editItem(id) {
            debugLog('‚úèÔ∏è Editing item:', id);
            const item = currentData.find(i => i.id == id);
            if (!item) {
                debugLog('‚ùå Item not found:', id);
                return;
            }

            document.getElementById('modalTitle').textContent = '√âditer';
            document.getElementById('itemId').value = id;

            if (currentType === 'jobs') {
                document.getElementById('title').value = item.title || '';
                document.getElementById('department').value = item.department || '';
                document.getElementById('location').value = item.location || item.lieu || '';
                document.getElementById('type').value = item.type || '';
                document.getElementById('salary').value = item.salary || item.salaire || '';
                document.getElementById('datePosted').value = item.datePosted || '';
                document.getElementById('deadline').value = item.deadline || '';
                document.getElementById('summary').value = item.summary || '';
                
                // Convert HTML to plain text
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = item.description || '';
                const plainText = tempDiv.textContent || tempDiv.innerText || '';
                const descField = document.getElementById('description');
                descField.value = plainText;
                
                // Store original HTML
                descField.removeAttribute('data-processed-content');
                if (item.description) {
                    descField.setAttribute('data-processed-content', item.description);
                }
            } else {
                document.getElementById('newsTitle').value = item.title || '';
                document.getElementById('date').value = item.date || '';
                document.getElementById('category').value = item.category || '';
                document.getElementById('newsSummary').value = item.summary || '';
                
                // Convert HTML to plain text
                const tempDiv2 = document.createElement('div');
                tempDiv2.innerHTML = item.content || '';
                const plainText = tempDiv2.textContent || tempDiv2.innerText || '';
                const contentField = document.getElementById('content');
                contentField.value = plainText;
                
                // Store original HTML
                contentField.removeAttribute('data-processed-content');
                if (item.content) {
                    contentField.setAttribute('data-processed-content', item.content);
                }
            }

            toggleFieldVisibility();
            document.getElementById('editModal').classList.remove('hidden');
        }

        async function saveItem(e) {
            e.preventDefault();
            
            debugLog('üíæ Starting save...');
            
            try {
                const id = document.getElementById('itemId').value;
                const isNew = !id;
                
                let data = { lang: currentLang };
                
                if (currentType === 'jobs') {
                    const descTextarea = document.getElementById('description');
                    if (!descTextarea) {
                        throw new Error('Description field not found');
                    }
                    
                    const descText = descTextarea.value || '';
                    debugLog('üìù Description text length:', descText.length);
                    
                    // Get processed content
                    let descHtml = descTextarea.getAttribute('data-processed-content');
                    debugLog('üìÑ Stored HTML:', descHtml ? descHtml.length + ' chars' : 'none');
                    
                    // If no processed content, process the text
                    if (!descHtml || descHtml.trim() === '') {
                        debugLog('‚öôÔ∏è Processing raw text...');
                        descHtml = processWordContent(descText);
                    }
                    
                    // Final fallback
                    if (!descHtml || descHtml.trim() === '') {
                        descHtml = descText ? `<p>${descText}</p>` : '';
                    }
                    
                    debugLog('‚úÖ Final HTML length:', descHtml.length);
                    
                    data = {
                        ...data,
                        title: document.getElementById('title').value,
                        department: document.getElementById('department').value,
                        location: document.getElementById('location').value,
                        type: document.getElementById('type').value,
                        salary: document.getElementById('salary').value,
                        datePosted: document.getElementById('datePosted').value,
                        deadline: document.getElementById('deadline').value,
                        summary: convertUrlsToLinks(document.getElementById('summary').value),
                        description: descHtml
                    };
                } else {
                    const contentTextarea = document.getElementById('content');
                    if (!contentTextarea) {
                        throw new Error('Content field not found');
                    }
                    
                    const contentText = contentTextarea.value || '';
                    debugLog('üìù Content text length:', contentText.length);
                    
                    // Get processed content
                    let contentHtml = contentTextarea.getAttribute('data-processed-content');
                    debugLog('üìÑ Stored HTML:', contentHtml ? contentHtml.length + ' chars' : 'none');
                    
                    // If no processed content, process the text
                    if (!contentHtml || contentHtml.trim() === '') {
                        debugLog('‚öôÔ∏è Processing raw text...');
                        contentHtml = processWordContent(contentText);
                    }
                    
                    // Final fallback
                    if (!contentHtml || contentHtml.trim() === '') {
                        contentHtml = contentText ? `<p>${contentText}</p>` : '';
                    }
                    
                    debugLog('‚úÖ Final HTML length:', contentHtml.length);
                    
                    data = {
                        ...data,
                        title: document.getElementById('newsTitle').value,
                        date: document.getElementById('date').value,
                        category: document.getElementById('category').value,
                        summary: convertUrlsToLinks(document.getElementById('newsSummary').value),
                        content: contentHtml
                    };
                }

                debugLog('üì¶ Sending data:', data);
                
                const url = isNew 
                    ? `/api/cms/${currentType}` 
                    : `/api/cms/${currentType}/${id}`;
                
                const response = await fetchWithAuth(url, {
                    method: isNew ? 'POST' : 'PUT',
                    body: JSON.stringify(data)
                });

                if (!response) return;

                debugLog('üì° Response status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    debugLog('‚ùå Server error:', errorText);
                    throw new Error(`Save failed: ${response.status} ${errorText}`);
                }
                
                const result = await response.json();
                debugLog('‚úÖ Save successful:', result);
                
                // Clear processed content
                const descField = document.getElementById('description');
                const contentField = document.getElementById('content');
                if (descField) descField.removeAttribute('data-processed-content');
                if (contentField) contentField.removeAttribute('data-processed-content');
                
                closeModal();
                await loadContent();
                alert(isNew ? '‚úÖ Cr√©√© avec succ√®s' : '‚úÖ Modifi√© avec succ√®s');
            } catch (error) {
                debugLog('‚ùå Save error:', error.message);
                alert(`‚ùå Erreur: ${error.message}`);
            }
        }

        async function deleteItem(id) {
            if (!await showConfirmDialog('√ätes-vous s√ªr de vouloir supprimer cet √©l√©ment?')) return;

            debugLog('üóëÔ∏è Deleting item:', id);
            
            try {
                const response = await fetchWithAuth(`/api/cms/${currentType}/${id}?lang=${currentLang}`, {
                    method: 'DELETE'
                });

                if (!response) return;
                if (!response.ok) throw new Error('Delete failed');
                
                debugLog('‚úÖ Delete successful');
                loadContent();
                alert('Supprim√© avec succ√®s');
            } catch (error) {
                debugLog('‚ùå Delete error:', error.message);
                alert('Erreur de suppression');
            }
        }

        function closeModal() {
            document.getElementById('editModal').classList.add('hidden');
        }
        
        function closeModalOnBackdrop(event) {
            if (event.target === event.currentTarget) {
                closeModal();
            }
        }

        function showConfirmDialog(message) {
            return new Promise((resolve) => {
                document.getElementById('confirmMessage').textContent = message;
                document.getElementById('confirmDialog').classList.remove('hidden');
                
                document.getElementById('confirmOK').onclick = () => {
                    document.getElementById('confirmDialog').classList.add('hidden');
                    resolve(true);
                };
                
                document.getElementById('confirmCancel').onclick = () => {
                    document.getElementById('confirmDialog').classList.add('hidden');
                    resolve(false);
                };
            });
        }

        // Initial load
        toggleFieldVisibility();
        
        // Check initial content type
        if (document.getElementById('contentType').value === 'news') {
            document.getElementById('departmentFilter').style.display = 'block';
        }
        
        // TEST FUNCTIONS FOR DEBUGGING
        window.testHTMLProcessing = function() {
            const testHTML = `<p><strong>Titre Important</strong></p>
<p>Ceci est un paragraphe avec du texte <strong>en gras</strong> et un lien: <a href="https://example.com">cliquez ici</a>.</p>
<p>Un autre paragraphe avec <em>italique</em> et <strong>gras combin√©</strong>.</p>`;
            
            console.log('üß™ Testing HTML processing');
            console.log('üìÑ Input HTML:', testHTML);
            
            const processed = processWordHTMLSimple(testHTML);
            console.log('‚úÖ Processed:', processed);
            
            // Show in description field
            const descField = document.getElementById('description');
            if (descField) {
                descField.value = 'Test content with formatting';
                descField.setAttribute('data-processed-content', processed);
                showContentPreview('description', processed);
            }
        };
        
        window.forceProcessContent = function(fieldId) {
            const field = document.getElementById(fieldId);
            if (field && field.value) {
                const processed = processPlainTextSimple(field.value);
                field.setAttribute('data-processed-content', processed);
                showContentPreview(fieldId, processed);
                console.log('‚úÖ Content processed and preview updated');
            }
        };
    </script>
</body>
</html>