// REPLACE YOUR ENTIRE <script> SECTION WITH THIS IMPROVED VERSION

let currentType = 'jobs';
let currentLang = 'fr';
let currentData = [];

// Simple password check
const PASSWORD = 'admin123';

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Attach paste handlers properly
    attachPasteHandlers();
    loadContent();
});

// Properly attach paste handlers
function attachPasteHandlers() {
    const descriptionField = document.getElementById('description');
    const contentField = document.getElementById('content');
    
    if (descriptionField) {
        // Remove any existing onpaste attribute and add proper event listener
        descriptionField.removeAttribute('onpaste');
        descriptionField.addEventListener('paste', (e) => handlePaste(e, 'description'));
        console.log('✅ Paste handler attached to description field');
    }
    
    if (contentField) {
        // Remove any existing onpaste attribute and add proper event listener
        contentField.removeAttribute('onpaste');
        contentField.addEventListener('paste', (e) => handlePaste(e, 'content'));
        console.log('✅ Paste handler attached to content field');
    }
}

// Enhanced paste handling for Word documents
function handlePaste(event, fieldId) {
    console.log('🔥 PASTE EVENT TRIGGERED for field:', fieldId);
    
    // Prevent default paste behavior
    event.preventDefault();
    
    try {
        // Get clipboard data
        const clipboardData = event.clipboardData || window.clipboardData;
        
        if (!clipboardData) {
            console.error('❌ No clipboard data available');
            return;
        }
        
        console.log('📋 Available clipboard types:', Array.from(clipboardData.types));
        
        let pastedData = '';
        let isHTML = false;
        
        // Try to get HTML first (preserves Word links), then fall back to plain text
        if (clipboardData.types && clipboardData.types.includes('text/html')) {
            pastedData = clipboardData.getData('text/html');
            isHTML = true;
            console.log('📄 Got HTML data, length:', pastedData.length);
        } else {
            pastedData = clipboardData.getData('text/plain') || clipboardData.getData('text');
            console.log('📝 Got plain text data, length:', pastedData.length);
        }
        
        if (!pastedData) {
            console.error('❌ No paste data found');
            return;
        }
        
        // Process the content
        let processedContent = '';
        
        if (isHTML) {
            // Clean Word HTML and extract content
            const cleanedText = cleanWordHTML(pastedData);
            processedContent = processWordContent(cleanedText);
        } else {
            // Process plain text
            processedContent = processWordContent(pastedData);
        }
        
        console.log('🔧 Processed content length:', processedContent.length);
        
        // Insert into textarea
        const textarea = document.getElementById(fieldId);
        if (textarea) {
            // Get current cursor position
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            
            // Insert processed content at cursor position
            const beforeText = textarea.value.substring(0, start);
            const afterText = textarea.value.substring(end);
            
            // For HTML content, we need to convert back to plain text for editing
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = processedContent;
            const plainText = tempDiv.textContent || tempDiv.innerText || processedContent;
            
            textarea.value = beforeText + plainText + afterText;
            
            // Set cursor after inserted content
            const newPosition = start + plainText.length;
            textarea.setSelectionRange(newPosition, newPosition);
            textarea.focus();
            
            console.log('✅ Content inserted successfully');
            
            // Show preview
            showContentPreview(fieldId, processedContent);
            
            // Trigger input event to update any other handlers
            textarea.dispatchEvent(new Event('input', { bubbles: true }));
            
        } else {
            console.error('❌ Textarea not found:', fieldId);
        }
        
    } catch (error) {
        console.error('❌ Error in handlePaste:', error);
        
        // Simple fallback: just get plain text and insert it
        try {
            const plainText = (event.clipboardData || window.clipboardData).getData('text/plain');
            const textarea = document.getElementById(fieldId);
            if (textarea && plainText) {
                const start = textarea.selectionStart;
                const end = textarea.selectionEnd;
                const beforeText = textarea.value.substring(0, start);
                const afterText = textarea.value.substring(end);
                textarea.value = beforeText + plainText + afterText;
                textarea.setSelectionRange(start + plainText.length, start + plainText.length);
                console.log('✅ Fallback: inserted plain text');
            }
        } catch (fallbackError) {
            console.error('❌ Fallback also failed:', fallbackError);
        }
    }
}

// Clean Word's HTML and preserve links
function cleanWordHTML(html) {
    if (!html) return '';
    
    console.log('🧹 Cleaning Word HTML...');
    
    // Create a temporary div to work with the HTML safely
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    // Extract all links before cleaning
    const links = tempDiv.querySelectorAll('a[href]');
    const linkMap = new Map();
    
    links.forEach((link, index) => {
        const placeholder = `__PRESERVED_LINK_${index}__`;
        const linkText = link.textContent || link.innerText;
        const linkUrl = link.getAttribute('href');
        
        linkMap.set(placeholder, {
            text: linkText,
            url: linkUrl
        });
        
        // Replace link with placeholder
        link.outerHTML = placeholder;
    });
    
    // Get clean text content
    let cleanText = tempDiv.textContent || tempDiv.innerText || '';
    
    // Restore links with proper formatting
    linkMap.forEach((linkInfo, placeholder) => {
        const linkHTML = `<a href="${linkInfo.url}" style="text-decoration: underline; color: #1d4ed8;" target="_blank">${linkInfo.text}</a>`;
        cleanText = cleanText.replace(placeholder, `__LINK_START__${linkInfo.text}__LINK_URL__${linkInfo.url}__LINK_END__`);
    });
    
    console.log(`✅ Extracted ${linkMap.size} links from Word HTML`);
    return cleanText;
}

// Process Word content into proper HTML
function processWordContent(text) {
    if (!text || text.trim().length === 0) return '';
    
    console.log('🔄 Processing Word content...');
    
    // Clean up Word's special characters first
    text = text.replace(/[\u2018\u2019]/g, "'"); // Smart quotes
    text = text.replace(/[\u201C\u201D]/g, '"'); // Smart quotes  
    text = text.replace(/\u2013/g, '-'); // En dash
    text = text.replace(/\u2014/g, '—'); // Em dash
    text = text.replace(/\u2026/g, '...'); // Ellipsis
    text = text.replace(/\u00A0/g, ' '); // Non-breaking space
    
    // Restore preserved links
    text = text.replace(/__LINK_START__(.*?)__LINK_URL__(.*?)__LINK_END__/g, 
        '<a href="$2" style="text-decoration: underline; color: #1d4ed8;" target="_blank">$1</a>');
    
    // Convert URLs, emails, and other content to links
    text = convertUrlsToLinks(text);
    
    // Smart paragraph detection
    let paragraphs = [];
    
    // Split on clear paragraph breaks (double line breaks)
    const sections = text.split(/\n\s*\n+/);
    
    for (const section of sections) {
        if (!section.trim()) continue;
        
        // Further split sections on patterns that typically start new paragraphs
        const patterns = [
            /\n(?=[A-ZÀÉÈÊËÏÎÔÖÙÚÛÜŸÇ][a-zàéèêëïîôöùúûüÿç])/,  // Capital letter
            /\n(?=Montréal|Québec|COMMUNIQUÉ|CONTACT|Pour\s|Après\s|Les\s|En\s|De\s|Le\s|La\s)/,  // Common French starters
            /\n(?=Contact|Tel|Tél|Email|E-mail|www\.|http)/  // Contact info
        ];
        
        let subParagraphs = [section];
        
        for (const pattern of patterns) {
            const newSubs = [];
            for (const sub of subParagraphs) {
                newSubs.push(...sub.split(pattern));
            }
            subParagraphs = newSubs;
        }
        
        // Clean and add valid paragraphs
        for (const para of subParagraphs) {
            const cleanPara = para.trim()
                .replace(/\n+/g, ' ')  // Replace line breaks with spaces
                .replace(/\s+/g, ' ')  // Normalize multiple spaces
                .trim();
            
            // Only keep paragraphs with substantial content
            if (cleanPara.length > 15) {
                paragraphs.push(cleanPara);
            }
        }
    }
    
    // Fallback: if no paragraphs detected, create them
    if (paragraphs.length === 0 && text.trim().length > 0) {
        const cleaned = text.trim().replace(/\n+/g, ' ').replace(/\s+/g, ' ');
        
        if (cleaned.length > 800) {
            // Split long text into smaller chunks at sentence boundaries
            const sentences = cleaned.split(/(?<=[.!?])\s+/);
            let currentPara = '';
            
            for (const sentence of sentences) {
                if (currentPara.length + sentence.length > 400) {
                    if (currentPara.trim()) {
                        paragraphs.push(currentPara.trim());
                    }
                    currentPara = sentence + ' ';
                } else {
                    currentPara += sentence + ' ';
                }
            }
            
            if (currentPara.trim()) {
                paragraphs.push(currentPara.trim());
            }
        } else {
            paragraphs = [cleaned];
        }
    }
    
    // Convert to HTML paragraphs
    const result = paragraphs.map(para => `<p>${para}</p>`).join('\n');
    console.log(`✅ Created ${paragraphs.length} paragraphs`);
    
    return result;
}

// Enhanced URL and email link conversion
function convertUrlsToLinks(text) {
    // Skip if already processed
    if (text.includes('<a href=') && text.includes('text-decoration: underline')) {
        return text;
    }
    
    let result = text;
    
    // Handle email addresses
    const emailRegex = /\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})\b/gi;
    result = result.replace(emailRegex, '<a href="mailto:$1" style="text-decoration: underline; color: #1d4ed8;">$1</a>');
    
    // Handle full URLs (http/https)
    const urlRegex = /(https?:\/\/[^\s<>"'\[\]{}|\\^`]+)/gi;
    result = result.replace(urlRegex, '<a href="$1" target="_blank" style="text-decoration: underline; color: #1d4ed8;">$1</a>');
    
    // Handle www domains
    const wwwRegex = /\b(www\.[a-zA-Z0-9-]+\.[a-zA-Z]{2,}(?:\.[a-zA-Z]{2,})?(?:\/[^\s]*)?)/gi;
    result = result.replace(wwwRegex, '<a href="https://$1" target="_blank" style="text-decoration: underline; color: #1d4ed8;">$1</a>');
    
    // Handle domain names (be selective)
    const domainRegex = /\b([a-zA-Z0-9-]+\.(com|org|net|ca|gov|edu|fr|info))\b/gi;
    result = result.replace(domainRegex, (match, domain) => {
        // Skip if already processed or part of an email
        if (result.includes(`@${domain}`) || 
            result.includes(`//${domain}`) || 
            result.includes(`www.${domain}`) ||
            result.includes(`href="${domain}"`)) {
            return match;
        }
        return `<a href="https://${domain}" target="_blank" style="text-decoration: underline; color: #1d4ed8;">${domain}</a>`;
    });
    
    // Handle bold formatting
    result = result.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    
    return result;
}

// Show content preview  
function showContentPreview(fieldId, content) {
    const previewDiv = document.getElementById(fieldId + 'Preview');
    const previewText = document.getElementById(fieldId + 'PreviewText');
    
    if (previewDiv && previewText && content) {
        // Create preview text
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = content;
        const plainPreview = tempDiv.textContent || tempDiv.innerText || '';
        
        const shortPreview = plainPreview.substring(0, 200) + (plainPreview.length > 200 ? '...' : '');
        previewText.textContent = shortPreview;
        previewDiv.style.display = 'block';
        
        console.log('👁️ Preview updated for', fieldId);
    }
}

// Validate content exists (keep existing function)
function validateContent() {
    const contentField = document.getElementById('content');
    const descriptionField = document.getElementById('description');
    
    if (contentField && contentField.value.trim().length > 0) {
        console.log('Content field has text:', contentField.value.length, 'characters');
    }
    if (descriptionField && descriptionField.value.trim().length > 0) {
        console.log('Description field has text:', descriptionField.value.length, 'characters');
    }
}

// Strip HTML tags from text (keep existing function)
function stripHtml(html) {
    const tmp = document.createElement('DIV');
    tmp.innerHTML = html;
    return tmp.textContent || tmp.innerText || '';
}

// Sync mobile and desktop dropdowns (keep existing function)
function syncDropdowns() {
    const mobileContentType = document.getElementById('contentType');
    const desktopContentType = document.getElementById('contentTypeDesktop');
    const mobileLanguage = document.getElementById('language');
    const desktopLanguage = document.getElementById('languageDesktop');
    
    // Mobile content type change
    mobileContentType.addEventListener('change', (e) => {
        currentType = e.target.value;
        desktopContentType.value = e.target.value;
        toggleFieldVisibility();
        loadContent();
    });
    
    // Desktop content type change
    desktopContentType.addEventListener('change', (e) => {
        currentType = e.target.value;
        mobileContentType.value = e.target.value;
        toggleFieldVisibility();
        loadContent();
    });
    
    // Mobile language change
    mobileLanguage.addEventListener('change', (e) => {
        currentLang = e.target.value;
        desktopLanguage.value = e.target.value;
        loadContent();
    });
    
    // Desktop language change
    desktopLanguage.addEventListener('change', (e) => {
        currentLang = e.target.value;
        mobileLanguage.value = e.target.value;
        loadContent();
    });
}

// Initialize dropdown sync
syncDropdowns();

document.getElementById('editForm').addEventListener('submit', saveItem);

function toggleFieldVisibility() {
    const jobFields = document.querySelector('.jobFields');
    const newsFields = document.querySelector('.newsFields');
    
    if (currentType === 'jobs') {
        jobFields.classList.remove('hidden');
        newsFields.classList.add('hidden');
    } else {
        jobFields.classList.add('hidden');
        newsFields.classList.remove('hidden');
    }
}

function logout() {
    window.location.href = '/admin/';
}

// Simple fetch with password authentication (keep existing)
async function fetchWithAuth(url, options = {}) {
    const response = await fetch(url, {
        ...options,
        headers: {
            'X-Admin-Password': PASSWORD,
            'Content-Type': 'application/json',
            ...options.headers
        }
    });

    if (response.status === 401 || response.status === 403) {
        window.location.href = '/admin/';
        return null;
    }

    return response;
}

async function loadContent() {
    try {
        const response = await fetchWithAuth(`/api/cms/${currentType}?lang=${currentLang}`);
        
        if (!response) return;

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        currentData = currentType === 'jobs' ? data.jobs : data.news;
        displayContent(currentData);
    } catch (error) {
        console.error('Error loading content:', error);
    }
}

function displayContent(items) {
    const container = document.getElementById('content');
    
    if (!items || items.length === 0) {
        container.innerHTML = '<p class="text-gray-500 text-center py-8">Aucun contenu</p>';
        return;
    }

    container.innerHTML = items.map(item => {
        if (currentType === 'jobs') {
            // Extract plain text from description
            let descText = '';
            if (item.description) {
                const temp = document.createElement('div');
                temp.innerHTML = item.description;
                descText = temp.textContent || temp.innerText || '';
                descText = descText.substring(0, 200) + (descText.length > 200 ? '...' : '');
            }
            
            return `
                <div class="bg-white rounded-lg shadow p-4 md:p-6">
                    <div class="block md:flex md:justify-between md:items-start">
                        <div class="w-full md:flex-1 md:pr-4">
                            <h3 class="text-xl font-bold text-blue-600">${item.title || ''}</h3>
                            <div class="text-sm text-gray-600 mt-2">
                                <strong>Department:</strong> ${item.department || 'N/A'} | 
                                <strong>Location:</strong> ${item.location || item.lieu || 'N/A'} | 
                                <strong>Type:</strong> ${item.type || 'N/A'}
                            </div>
                            ${descText ? `<div class="mt-3 text-gray-700 border-l-4 border-blue-200 pl-4 text-sm leading-relaxed w-full">
                                <strong>Description:</strong><br><span class="block mt-1">${descText}</span>
                            </div>` : '<div class="mt-3 text-gray-500 italic">No description available</div>'}
                        </div>
                        <div class="flex gap-2 mt-4 md:mt-0 md:flex-col md:gap-2">
                            <button onclick="editItem(${item.id})" class="bg-blue-500 text-white px-3 py-2 rounded text-sm hover:bg-blue-600 flex-1 md:flex-none">
                                Éditer
                            </button>
                            <button onclick="deleteItem(${item.id})" class="bg-red-500 text-white px-3 py-2 rounded text-sm hover:bg-red-600 flex-1 md:flex-none">
                                Supprimer
                            </button>
                        </div>
                    </div>
                </div>
            `;
        } else {
            // Extract plain text from content
            let contentText = '';
            if (item.content) {
                const temp = document.createElement('div');
                temp.innerHTML = item.content;
                contentText = temp.textContent || temp.innerText || '';
                contentText = contentText.substring(0, 200) + (contentText.length > 200 ? '...' : '');
            }
            
            return `
                <div class="bg-white rounded-lg shadow p-4 md:p-6">
                    <div class="block md:flex md:justify-between md:items-start">
                        <div class="w-full md:flex-1 md:pr-4">
                            <h3 class="text-xl font-bold text-purple-600">${item.title || ''}</h3>
                            <div class="text-sm text-gray-600 mt-2">
                                <strong>Date:</strong> ${item.date || 'N/A'} | 
                                <strong>Category:</strong> ${item.category || 'N/A'}
                            </div>
                            ${contentText ? `<div class="mt-3 text-gray-700 border-l-4 border-purple-200 pl-4 pr-2 text-sm leading-relaxed">
                                <strong>Content:</strong><br><span class="block mt-1">${contentText}</span>
                            </div>` : '<div class="mt-3 text-gray-500 italic">No content available</div>'}
                        </div>
                        <div class="flex gap-2 mt-4 md:mt-0 md:flex-col md:gap-2">
                            <button onclick="editItem(${item.id})" class="bg-purple-500 text-white px-3 py-2 rounded text-sm hover:bg-purple-600 flex-1 md:flex-none">
                                Éditer
                            </button>
                            <button onclick="deleteItem(${item.id})" class="bg-red-500 text-white px-3 py-2 rounded text-sm hover:bg-red-600 flex-1 md:flex-none">
                                Supprimer
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }
    }).join('');
}

function showAddForm() {
    document.getElementById('modalTitle').textContent = 'Ajouter';
    document.getElementById('editForm').reset();
    document.getElementById('itemId').value = '';
    toggleFieldVisibility();
    document.getElementById('editModal').classList.remove('hidden');
    
    // Reattach paste handlers after modal opens
    setTimeout(attachPasteHandlers, 100);
}

function editItem(id) {
    const item = currentData.find(i => i.id == id);
    if (!item) return;

    document.getElementById('modalTitle').textContent = 'Éditer';
    document.getElementById('itemId').value = id;

    if (currentType === 'jobs') {
        document.getElementById('title').value = item.title || '';
        document.getElementById('department').value = item.department || '';
        document.getElementById('location').value = item.location || item.lieu || '';
        document.getElementById('type').value = item.type || '';
        document.getElementById('salary').value = item.salary || item.salaire || '';
        document.getElementById('datePosted').value = item.datePosted || '';
        document.getElementById('deadline').value = item.deadline || '';
        document.getElementById('summary').value = item.summary || '';
        // Convert HTML to plain text for editing
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = item.description || '';
        document.getElementById('description').value = tempDiv.textContent || tempDiv.innerText || '';
    } else {
        document.getElementById('newsTitle').value = item.title || '';
        document.getElementById('date').value = item.date || '';
        document.getElementById('category').value = item.category || '';
        document.getElementById('newsSummary').value = item.summary || '';
        // Convert HTML to plain text for editing
        const tempDiv2 = document.createElement('div');
        tempDiv2.innerHTML = item.content || '';
        document.getElementById('content').value = tempDiv2.textContent || tempDiv2.innerText || '';
    }

    toggleFieldVisibility();
    document.getElementById('editModal').classList.remove('hidden');
    
    // Reattach paste handlers after modal opens
    setTimeout(attachPasteHandlers, 100);
}

async function saveItem(e) {
    e.preventDefault();
    
    try {
        const id = document.getElementById('itemId').value;
        const isNew = !id;
        
        let data = { lang: currentLang };
        
        if (currentType === 'jobs') {
            // Use enhanced text processing for job descriptions
            const descText = document.getElementById('description').value;
            const descHtml = processWordContent(descText);
            
            data = {
                ...data,
                title: document.getElementById('title').value,
                department: document.getElementById('department').value,
                location: document.getElementById('location').value,
                type: document.getElementById('type').value,
                salary: document.getElementById('salary').value,
                datePosted: document.getElementById('datePosted').value,
                deadline: document.getElementById('deadline').value,
                summary: convertUrlsToLinks(document.getElementById('summary').value),
                description: descHtml
            };
        } else {
            // Use enhanced text processing for news content
            const contentText = document.getElementById('content').value;
            console.log('Raw content text:', contentText);
            
            let contentHtml = processWordContent(contentText);
            if (!contentHtml || contentHtml.trim().length === 0) {
                contentHtml = contentText ? `<p>${convertUrlsToLinks(contentText.replace(/\n+/g, '</p><p>'))}</p>` : '';
            }
            console.log('Processed content:', contentHtml);
            
            data = {
                ...data,
                title: document.getElementById('newsTitle').value,
                date: document.getElementById('date').value,
                category: document.getElementById('category').value,
                summary: convertUrlsToLinks(document.getElementById('newsSummary').value),
                content: contentHtml
            };
        }

        console.log('Saving data:', data);
        
        const url = isNew 
            ? `/api/cms/${currentType}` 
            : `/api/cms/${currentType}/${id}`;
        
        const response = await fetchWithAuth(url, {
            method: isNew ? 'POST' : 'PUT',
            body: JSON.stringify(data)
        });

        if (!response) return;

        console.log('Response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('Response error:', errorText);
            throw new Error(`Save failed: ${response.status} ${errorText}`);
        }
        
        closeModal();
        await loadContent();
        alert(isNew ? 'Créé avec succès' : 'Modifié avec succès');
    } catch (error) {
        console.error('Save error:', error);
        alert(`Erreur de sauvegarde: ${error.message}`);
    }
}

async function deleteItem(id) {
    if (!await showConfirmDialog('Êtes-vous sûr de vouloir supprimer cet élément?')) return;

    try {
        const response = await fetchWithAuth(`/api/cms/${currentType}/${id}?lang=${currentLang}`, {
            method: 'DELETE'
        });

        if (!response) return;
        if (!response.ok) throw new Error('Delete failed');
        
        loadContent();
        alert('Supprimé avec succès');
    } catch (error) {
        console.error('Error:', error);
        alert('Erreur de suppression');
    }
}

function closeModal() {
    document.getElementById('editModal').classList.add('hidden');
}

function closeModalOnBackdrop(event) {
    if (event.target === event.currentTarget) {
        closeModal();
    }
}

// Custom confirmation dialog
function showConfirmDialog(message) {
    return new Promise((resolve) => {
        document.getElementById('confirmMessage').textContent = message;
        document.getElementById('confirmDialog').classList.remove('hidden');
        
        document.getElementById('confirmOK').onclick = () => {
            document.getElementById('confirmDialog').classList.add('hidden');
            resolve(true);
        };
        
        document.getElementById('confirmCancel').onclick = () => {
            document.getElementById('confirmDialog').classList.add('hidden');
            resolve(false);
        };
    });
}

// Load initial content
toggleFieldVisibility();